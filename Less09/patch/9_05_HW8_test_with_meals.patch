Index: src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaUserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaUserServiceTest.java	(revision 86b01e391d38d548f10a882c154068425607b656)
+++ src/test/java/ru/javawebinar/topjava/service/datajpa/DataJpaUserServiceTest.java	(date 1596665218470)
@@ -3,7 +3,6 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.springframework.test.context.ActiveProfiles;
-import ru.javawebinar.topjava.MealTestData;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.service.AbstractUserServiceTest;
 import ru.javawebinar.topjava.util.exception.NotFoundException;
@@ -16,8 +15,7 @@
     @Test
     void getWithMeals() throws Exception {
         User admin = service.getWithMeals(ADMIN_ID);
-        USER_MATCHER.assertMatch(admin, ADMIN);
-        MealTestData.MEAL_MATCHER.assertMatch(admin.getMeals(), MealTestData.ADMIN_MEAL2, MealTestData.ADMIN_MEAL1);
+        USER_WITH_MEALS_MATCHER.assertMatch(admin, ADMIN);
     }
 
     @Test
Index: src/test/java/ru/javawebinar/topjava/UserTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/UserTestData.java	(revision 86b01e391d38d548f10a882c154068425607b656)
+++ src/test/java/ru/javawebinar/topjava/UserTestData.java	(date 1596665218487)
@@ -5,11 +5,21 @@
 
 import java.util.Collections;
 import java.util.Date;
+import java.util.List;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static ru.javawebinar.topjava.MealTestData.*;
 import static ru.javawebinar.topjava.model.AbstractBaseEntity.START_SEQ;
 
 public class UserTestData {
-    public static TestMatcher<User> USER_MATCHER = TestMatcher.usingFieldsWithIgnoringAssertions(User.class, "registered","meals");
+    public static TestMatcher<User> USER_MATCHER = TestMatcher.usingFieldsWithIgnoringAssertions(User.class, "registered", "meals");
+    public static TestMatcher<User> USER_WITH_MEALS_MATCHER =
+            TestMatcher.usingAssertions(User.class,
+                    (a, e) -> assertThat(a).usingRecursiveComparison()
+                            .ignoringFields("registered", "meals.user").ignoringAllOverriddenEquals().isEqualTo(e),
+                    (a, e) -> {
+                        throw new UnsupportedOperationException();
+                    });
 
     public static final int NOT_FOUND = 10;
     public static final int USER_ID = START_SEQ;
@@ -18,6 +28,11 @@
     public static final User USER = new User(USER_ID, "User", "user@yandex.ru", "password", Role.USER);
     public static final User ADMIN = new User(ADMIN_ID, "Admin", "admin@gmail.com", "admin", Role.ADMIN, Role.USER);
 
+    static {
+        USER.setMeals(MEALS);
+        ADMIN.setMeals(List.of(ADMIN_MEAL2, ADMIN_MEAL1));
+    }
+
     public static User getNew() {
         return new User(null, "New", "new@gmail.com", "newPass", 1555, false, new Date(), Collections.singleton(Role.USER));
     }
Index: src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java	(revision 86b01e391d38d548f10a882c154068425607b656)
+++ src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java	(date 1596666482764)
@@ -45,4 +45,14 @@
 
         USER_MATCHER.assertMatch(userService.get(USER_ID), updated);
     }
+
+    @Test
+    void getWithMeals() throws Exception {
+        assumeDataJpa();
+        perform(MockMvcRequestBuilders.get(REST_URL + "/with-meals"))
+                .andExpect(status().isOk())
+                .andDo(print())
+                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
+                .andExpect(USER_WITH_MEALS_MATCHER.contentJson(USER));
+    }
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java	(revision 86b01e391d38d548f10a882c154068425607b656)
+++ src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java	(date 1596665218476)
@@ -96,4 +96,14 @@
 
         assertFalse(userService.get(USER_ID).isEnabled());
     }
+
+    @Test
+    void getWithMeals() throws Exception {
+        assumeDataJpa();
+        perform(MockMvcRequestBuilders.get(REST_URL + USER_ID + "/with-meals"))
+                .andExpect(status().isOk())
+                .andDo(print())
+                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
+                .andExpect(USER_WITH_MEALS_MATCHER.contentJson(USER));
+    }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/User.java	(revision 86b01e391d38d548f10a882c154068425607b656)
+++ src/main/java/ru/javawebinar/topjava/model/User.java	(date 1596665218466)
@@ -140,6 +140,10 @@
         return meals;
     }
 
+    public void setMeals(List<Meal> meals) {
+        this.meals = meals;
+    }
+
     @Override
     public String toString() {
         return "User{" +
Index: src/test/java/ru/javawebinar/topjava/web/AbstractControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/AbstractControllerTest.java	(revision 86b01e391d38d548f10a882c154068425607b656)
+++ src/test/java/ru/javawebinar/topjava/web/AbstractControllerTest.java	(date 1596665218484)
@@ -1,6 +1,8 @@
 package ru.javawebinar.topjava.web;
 
+import org.junit.jupiter.api.Assumptions;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.core.env.Environment;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit.jupiter.web.SpringJUnitWebConfig;
 import org.springframework.test.web.servlet.MockMvc;
@@ -11,6 +13,7 @@
 import org.springframework.web.context.WebApplicationContext;
 import org.springframework.web.filter.CharacterEncodingFilter;
 import ru.javawebinar.topjava.AllActiveProfileResolver;
+import ru.javawebinar.topjava.Profiles;
 
 import javax.annotation.PostConstruct;
 
@@ -27,6 +30,9 @@
 
     private static final CharacterEncodingFilter CHARACTER_ENCODING_FILTER = new CharacterEncodingFilter();
 
+    @Autowired
+    public Environment env;
+
     static {
         CHARACTER_ENCODING_FILTER.setEncoding("UTF-8");
         CHARACTER_ENCODING_FILTER.setForceEncoding(true);
@@ -37,6 +43,10 @@
     @Autowired
     private WebApplicationContext webApplicationContext;
 
+    public void assumeDataJpa() {
+        Assumptions.assumeTrue(env.acceptsProfiles(org.springframework.core.env.Profiles.of(Profiles.DATAJPA)), "DATA-JPA only");
+    }
+
     @PostConstruct
     private void postConstruct() {
         mockMvc = MockMvcBuilders
